from typing import List, Optional

from fastapi import Query
from pydantic import UUID4, Field

from app.pydantic_models.clean_model import CleanableBaseModel


class CompanyCreateSchema(CleanableBaseModel):
    name: str = Field(..., min_length=3, max_length=100, alias="company_name")
    description: Optional[str] = Field(None, description="–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")

    class Config:
        allow_population_by_field_name = True


class CompanyResponseSchema(CleanableBaseModel):
    company_id: UUID4

    class Config:
        allow_population_by_field_name = True


class CompanySchema(CleanableBaseModel):
    company_id: UUID4
    company_name: str
    description: Optional[str] = None


class CompanyListResponseSchema(CleanableBaseModel):
    total: int  # üî• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
    # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º `list`, –∞ –Ω–µ `List[CompanySchema]`
    companies: List[CompanySchema]

    class Config:
        from_attributes = True
        arbitrary_types_allowed = True  # –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∏–ø—ã


class CompanyEditSchema(CleanableBaseModel):
    name: Optional[str] = Field(
        None, min_length=3, max_length=100, alias="company_name"
    )
    description: Optional[str] = Field(None, description="–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")


def company_filter_params(
    search: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏"),
    sort_by: Optional[str] = Query("company_name", description="–ü–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
    order: Optional[str] = Query("asc", description="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: asc/desc"),
    page: Optional[int] = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    page_size: Optional[int] = Query(10, ge=1, le=100, description="–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
):
    return {
        "search": search,
        "sort_by": sort_by,
        "order": order,
        "page": page,
        "page_size": page_size,
    }
