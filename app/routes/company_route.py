from uuid import UUID

from fastapi import APIRouter, Body, Depends, HTTPException, Path, status
from loguru import logger
from tortoise.expressions import Q

from app.database.models import Company, Role, User, UserCompanyRelation
from app.dependencies.permissions import with_exact_company_permission
from app.handlers.auth import get_current_user
from app.pydantic_models.company_models import (
    CompanyCreateSchema,
    CompanyEditSchema,
    CompanyListResponseSchema,
    CompanyResponseSchema,
    CompanySchema,
    company_filter_params,
)

company_router = APIRouter()


@company_router.post(
    "/add",
    response_model=CompanyResponseSchema,
    summary="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏",
    status_code=status.HTTP_201_CREATED,
)
async def add_company(
    data: CompanyCreateSchema = Body(), user_data: dict = Depends(get_current_user)
):
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {data.model_dump()}")
    try:
        company = await Company.create(name=data.name, description=data.description)

        if not company:
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é")

        logger.success(f"–ö–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: {company.id}")
        role = await Role.get_or_none(system_name="admin")
        user = await User.get_or_none(email=user_data["email"])
        if role and user:
            await UserCompanyRelation.create(role=role, company=company, user=user)

        return {"company_id": str(company.id)}

    except (KeyError, TypeError, ValueError) as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ") from e


# ‚úÖ 2. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
@company_router.patch(
    "/{company_id}", response_model=CompanyResponseSchema, summary="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
)
async def edit_company(
    company_id: UUID = Path(
        ..., title="ID –∫–æ–º–ø–∞–Ω–∏–∏", description="ID –∏–∑–º–µ–Ω—è–µ–º–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"
    ),
    data: CompanyEditSchema = Body(),
    _=with_exact_company_permission("edit_company"),
):
    logger.info(
        f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ {company_id}: {data.model_dump(exclude_unset=True)}"
    )
    try:
        updated_rows = await Company.filter(id=company_id).update(
            **data.model_dump(exclude_unset=True)
        )

        if not updated_rows:
            raise HTTPException(status_code=404, detail="–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        logger.success(f"–ö–æ–º–ø–∞–Ω–∏—è {company_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        return {"company_id": str(company_id)}

    except (KeyError, TypeError, ValueError) as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ") from e


# ‚úÖ 3. –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
@company_router.delete(
    "/{company_id}", summary="–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", status_code=status.HTTP_204_NO_CONTENT
)
async def delete_company(
    company_id: UUID = Path(
        ..., title="ID –∫–æ–º–ø–∞–Ω–∏–∏", description="ID —É–¥–∞–ª—è–µ–º–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"
    ),
    _=with_exact_company_permission("delete_company"),
):
    logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {company_id}")

    company = await Company.filter(id=company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    await company.delete()
    logger.success(f"–ö–æ–º–ø–∞–Ω–∏—è {company_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")


@company_router.get(
    "/all",
    response_model=CompanyListResponseSchema,
    summary="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π",
)
async def get_companies(
    filters: dict = Depends(company_filter_params),
    user_data: dict = Depends(get_current_user),
):
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π: {filters}")
    try:
        query = Q()

        user = await User.get_or_none(email=user_data["email"])
        if not user:
            raise HTTPException(status_code=500, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")

        if not user.is_superadmin:
            # üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
            related_company_ids = await UserCompanyRelation.filter(
                user=user
            ).values_list("company__company_id", flat=True)

            if not related_company_ids:
                return CompanyListResponseSchema(total=0, companies=[])

            query &= Q(company_id__in=related_company_ids)

        # üîé –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if filters.get("search"):
            query &= Q(name__icontains=filters["search"])

        # üìä –ü–æ–¥—Å—á—ë—Ç –∏ –≤—ã–±–æ—Ä–∫–∞
        total_count = await Company.filter(query).count()

        sort_column = filters.get("sort_by", "company_name")
        sort_column = "name" if sort_column == "company_name" else sort_column
        order_by = f"{'-' if filters.get('order') == 'desc' else ''}{sort_column}"

        page = filters.get("page", 1)
        page_size = filters.get("page_size", 10)

        companies = (
            await Company.filter(query)
            .order_by(order_by)
            .offset((page - 1) * page_size)
            .limit(page_size)
        )

        return CompanyListResponseSchema(
            total=total_count,
            companies=[
                CompanySchema(
                    company_id=company.id,
                    company_name=company.name,
                    description=company.description,
                )
                for company in companies
            ],
        )

    except (KeyError, TypeError, ValueError) as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ") from e


@company_router.get(
    "/{company_id}", response_model=CompanySchema, summary="–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–ø–∞–Ω–∏–∏"
)
async def get_company(
    company_id: UUID = Path(
        ..., title="ID –∫–æ–º–ø–∞–Ω–∏–∏", description="ID –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"
    ),
    user_data: dict = Depends(get_current_user),
):
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–ø–∞–Ω–∏–∏: {company_id}")
    try:
        company = await Company.get_or_none(id=company_id)
        if company is None:
            logger.warning(f"–ö–æ–º–ø–∞–Ω–∏—è {company_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            raise HTTPException(status_code=404, detail="–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        user = await User.get_or_none(email=user_data["email"])
        relation = await UserCompanyRelation.filter(
            user=user, company_id=company_id
        ).exists()
        if not user or (not user.is_superadmin and not relation):
            raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏")

        company_schema = CompanySchema(
            company_id=company.id,
            company_name=company.name,
            description=company.description,
        )

        logger.success(f"–ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company_schema}")
        return company_schema

    except (KeyError, TypeError, ValueError) as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ") from e
