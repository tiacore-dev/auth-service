from uuid import UUID

import bcrypt
from fastapi import APIRouter, Body, Depends, HTTPException, Path, status
from loguru import logger
from tortoise.expressions import Q

from app.database.models import Company, Role, User, UserCompanyRelation, create_user
from app.dependencies.permissions import with_permission_and_company_check
from app.handlers.auth import require_superadmin
from app.handlers.depends import (
    require_permission_in_context,
    require_permission_or_self_view,
)
from app.pydantic_models.user_models import (
    UserCreateSchema,
    UserEditSchema,
    UserListResponseSchema,
    UserResponseSchema,
    UserSchema,
    user_filter_params,
)

user_router = APIRouter()


@user_router.post(
    "/add",
    response_model=UserResponseSchema,
    summary="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    status_code=status.HTTP_201_CREATED,
)
async def add_user(data: UserCreateSchema = Body(...), _=Depends(require_superadmin)):
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data.email}")
    try:
        existing_user = await User.get_or_none(email=data.email)
        if existing_user:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º {data.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            raise HTTPException(status_code=400, detail="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω—è—Ç–æ")
        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {data.email}")
        user = await create_user(
            email=data.email,
            full_name=data.full_name,
            position=data.position,
            password=data.password,
        )
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.id}")
        if not user:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            raise HTTPException(
                status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
        logger.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.email} ({user.id}) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        role = await Role.get_or_none(
            system_name="user", application_id=data.application_id
        )
        company = await Company.get_or_none(id=data.company_id)
        if role and company:
            await UserCompanyRelation.create(user=user, company=company, role=role)
        return {"user_id": str(user.id)}
    except (KeyError, TypeError, ValueError) as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ") from e


@user_router.patch(
    "/{user_id}", response_model=UserResponseSchema, summary="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
)
async def edit_user(
    user_id: UUID,
    data: UserEditSchema = Body(...),
    context=with_permission_and_company_check("edit_user"),
):
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data.email}")

    update_data = data.model_dump(exclude_unset=True)

    if "password" in update_data:  # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–æ–ª—å, —Ö–µ—à–∏—Ä—É–µ–º –µ–≥–æ
        update_data["password_hash"] = bcrypt.hashpw(
            update_data.pop("password").encode(), bcrypt.gensalt()
        ).decode()
    if "is_verified" in update_data:
        if not context["is_superadmin"]:
            update_data.pop("is_verified")
    updated_rows = None
    if update_data:
        updated_rows = await User.filter(id=user_id).update(**update_data)

    if not updated_rows:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    logger.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω")
    return {"user_id": str(user_id)}


@user_router.delete(
    "/{user_id}",
    summary="–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    status_code=status.HTTP_204_NO_CONTENT,
)
async def delete_user(
    user_id: UUID, _=with_permission_and_company_check("delete_user")
):
    logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    try:
        user = await User.filter(id=user_id).first()
        if not user:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if user.email == "admin":
            raise HTTPException(
                status_code=403, detail="–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
        await user.delete()
        logger.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    except (KeyError, TypeError, ValueError) as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ") from e


@user_router.get(
    "/all", response_model=UserListResponseSchema, summary="–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
)
async def get_users(
    filters: dict = Depends(user_filter_params),
    context=Depends(require_permission_in_context("get_all_users")),
):
    query = Q()
    search_value = filters.get("search")
    if search_value:
        query &= Q(email__icontains=search_value)

    company_filter = filters.get("company")

    if context["is_superadmin"]:
        if company_filter:
            related_user_ids = await UserCompanyRelation.filter(
                company=company_filter
            ).values_list("user_id", flat=True)

            if related_user_ids:
                query &= Q(id__in=related_user_ids)
            else:
                return UserListResponseSchema(total=0, users=[])
    else:
        if not context.get("company"):
            logger.info(f"–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context['user']}")
            return UserListResponseSchema(total=0, users=[])

        related_user_ids = await UserCompanyRelation.filter(
            company=context["company"]
        ).values_list("user_id", flat=True)

        if related_user_ids:
            query &= Q(id__in=related_user_ids)
        else:
            return UserListResponseSchema(total=0, users=[])

    order = filters.get("order", "asc")
    sort_by = filters.get("sort_by", "email")
    order_by = f"{'-' if order == 'desc' else ''}{sort_by}"
    page = filters.get("page", 1)
    page_size = filters.get("page_size", 10)

    total_count = await User.filter(query).count()

    users = (
        await User.filter(query)
        .order_by(order_by)
        .offset((page - 1) * page_size)
        .limit(page_size)
    )

    users_data = [
        UserSchema(
            user_id=user.id,
            email=user.email,
            full_name=user.full_name,
            position=user.position,
            is_verified=user.is_verified,
        )
        for user in users
    ]

    return UserListResponseSchema(total=total_count, users=users_data)


@user_router.get(
    "/{user_id}", response_model=UserSchema, summary="–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
)
async def get_user(
    user_id: UUID = Path(
        ..., title="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", description="ID –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    ),
    context: dict = Depends(require_permission_or_self_view("view_user")),
):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")

    user = await User.get_or_none(id=user_id)
    if user is None:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not context["is_superadmin"]:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ user_id –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
        allowed_user_ids = await UserCompanyRelation.filter(
            company=context["company"]
        ).values_list("user_id", flat=True)

        if user_id not in allowed_user_ids:
            raise HTTPException(
                status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            )

    return UserSchema(
        user_id=user.id,
        email=user.email,
        full_name=user.full_name,
        position=user.position,
        is_verified=user.is_verified,
    )
